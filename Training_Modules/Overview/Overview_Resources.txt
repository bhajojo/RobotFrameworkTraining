*** Settings ***
Library           OperatingSystem
Library           Selenium2Library
Library           ExcelLibrary
Library           Collections
Library           DateTime
Variables         ../../Common_Resources/objRepPFM.py
Resource          ../../Common_Resources/common_resources.txt
Library           String

*** Keywords ***
Overview_Date_Selection
    [Documentation]    This keyword selects the assessment period for financial management.
    page should contain element    ${objButtonSixMonths}
    page should contain element    ${objButtonThreeMonths}
    page should contain element    ${objButtonOneMonth}
    Open Excel    ${EXECDIR}/Test_Data/GlobalTestData.xls
    @{List}=    Get Row Values    Overview    4
    Click Element    ${objOverviewDateIconOpen}
    sleep    1s
    input text    ${objFromDate}    ${List[1][1]}
    sleep    1s
    capture page screenshot
    input text    ${objToDate}    ${List[2][1]}
    sleep    1s
    capture page screenshot
    Comment    Click Element    ${objFromDate}
    Comment    sleep    1s
    Comment    press key    ${objFromDate}    \\08
    Comment    press key    ${objFromDate}    \\53
    Comment    sleep    2s
    Comment    capture page screenshot

Overview_section_Validation
    [Documentation]    validates objects in overview section and fetched total income and expenses displayed against these headers.
    page should contain element    ${objOverviewHeaderActive}
    page should contain element    ${objTagsHeaderInactive}
    page should contain element    ${objFinancialStatusHeaderInactive}
    capture page screenshot
    ${Curr_Month}    Assessment_Period_Validation
    page should contain element    ${objHeading1}
    page should contain element    ${objHeading2}
    page should contain element    xpath=.//*[@id='wrapper']//h2[contains(.,'Highlights for ${Curr_Month}')]
    page should contain    Monthly Budgets
    page should contain    Biggest expenses
    page should contain    Most expenses
    page should contain    Daily spending
    page should contain    Time based Comparison
    page should contain element    ${objCategorySalary}
    page should contain element    ${objCategoryInvstmt}
    page should contain element    ${objCategoryFinInstt}
    page should contain element    ${objCategoryResidence}
    page should contain element    ${objCategoryCarsandTraffic}
    page should contain element    ${objCategoryFoodandShop}
    page should contain element    ${objCategoryHobbies}
    page should contain element    ${objCategoryBills}
    ${Total_Income}    get text    ${objTotalIncome}
    ${Total_Expenses}    get text    ${objTotalExpenses}
    Comment    ${Income_Highlights}    get text    ${objIncomeInHighlights}
    Comment    ${Expenses_Highlights}    get text    ${objExpensesInHighlights}
    Comment    should be equal as strings    ${Total_Income}    ${Income_Highlights}
    Comment    should be equal as strings    ${Total_Expenses}    ${Expenses_Highlights}
    Comment    ${Income_Highlights}    remove string    ${Income_Highlights}    €    ,
    Comment    ${Expenses_Highlights}    remove string    ${Expenses_Highlights}    €    ,    -
    Comment    ${Income_Highlights}    convert to number    ${Income_Highlights}
    Comment    ${Expenses_Highlights}    convert to number    ${Expenses_Highlights}
    Comment    ${Money_Left}    evaluate    ${Income_Highlights} - ${Expenses_Highlights}
    Comment    ${Money_Left_In_Highlights}    get text    ${objMoneyLeftInHighlights}
    Comment    ${Money_Left_In_Highlights}    remove string    ${Money_Left_In_Highlights}    €    ,
    Comment    ${Money_Left_In_Highlights}    convert to number    ${Money_Left_In_Highlights}
    Comment    should be equal as strings    ${Money_Left_In_Highlights}    ${Money_Left}
    [Return]    ${Total_Income}    ${Total_Expenses}

Assessment_Period_Validation
    [Documentation]    Validates assessment period displayed above INCOME header.
    ${Curr_Dt}    get current date
    ${Curr_Dt}    convert date    ${Curr_Dt}    result_format=%d.%m.%Y
    ${Dt}    split string    ${Curr_Dt}    .
    ${Months}    create list    list    January    February    March    April
    ...    May    June    July    August    September    October
    ...    November    December
    : FOR    ${Index}    IN RANGE    1    13
    \    ${Curr_Month}    run keyword if    ${Dt[1]}==${Index}    set variable    ${Months[${Index}]}
    \    ${Previous_Month}    run keyword if    ${Dt[1]}==${Index}    set variable    ${Months[${Index-1}]}
    \    ${iCounter}    convert to integer    ${Dt[1]}
    \    exit for loop if    ${iCounter}==${Index}
    log    ${Curr_Month}
    element should contain    ${objAssessmentTimePeriodEnd}    ${Curr_Month}    ${Dt[0]}
    element should contain    ${objAssessmentTimePeriodStart}    ${Previous_Month}    ${Dt[0]}
    capture page screenshot
    [Return]    ${Curr_Month}

Total_Income_Validation
    [Arguments]    ${Total_Income}
    [Documentation]    Calculates income from sub categories and matches it with total income.
    ${Total_Income}    remove string    ${Total_Income}    €    ,
    ${Total_Income}    convert to number    ${Total_Income}
    ${Income_Source_1}    get text    ${objInvestmentIncome}
    ${Income_Source_2}    get text    ${objSalaryAndPensionIncome}
    ${Income_Source_3}    get text    ${objFinancialInstitutesIncome}
    ${Income_Source_1}    remove string    ${Income_Source_1}    €    ,
    ${Income_Source_2}    remove string    ${Income_Source_2}    €    ,
    ${Income_Source_3}    remove string    ${Income_Source_3}    €    ,
    ${Income_Source_1}    convert to number    ${Income_Source_1}
    ${Income_Source_2}    convert to number    ${Income_Source_2}
    ${Income_Source_3}    convert to number    ${Income_Source_3}
    ${Evaluated_Income}    evaluate    ${Income_Source_1}+${Income_Source_2}+${Income_Source_3}
    should be equal as numbers    ${Total_Income}    ${Evaluated_Income}
    All_Income_Validation    ${Income_Source_1}    ${Income_Source_2}    ${Income_Source_3}

Total_Expenses_Validation
    [Arguments]    ${Total_Expenses}
    [Documentation]    Calculates expenses from sub categories and matches it with total expeses.
    ${Total_Expenses}    remove string    ${Total_Expenses}    €    ,
    ${Total_Expenses}    convert to number    ${Total_Expenses}
    ${objHobbiesExpenses}    get text    ${objHobbiesExpenses}
    ${objResidenceExpenses}    get text    ${objResidenceExpenses}
    ${objCarandTrafficExpenses}    get text    ${objCarandTrafficExpenses}
    ${objBillsExpenses}    get text    ${objBillsExpenses}
    ${objGroceryExpenses}    get text    ${objGroceryExpenses}
    ${objHobbiesExpenses}    remove string    ${objHobbiesExpenses}    €    ,
    ${objResidenceExpenses}    remove string    ${objResidenceExpenses}    €    ,
    ${objCarandTrafficExpenses}    remove string    ${objCarandTrafficExpenses}    €    ,
    ${objBillsExpenses}    remove string    ${objBillsExpenses}    €    ,
    ${objGroceryExpenses}    remove string    ${objGroceryExpenses}    €    ,
    ${objHobbiesExpenses}    convert to number    ${objHobbiesExpenses}
    ${objResidenceExpenses}    convert to number    ${objResidenceExpenses}
    ${objCarandTrafficExpenses}    convert to number    ${objCarandTrafficExpenses}
    ${objBillsExpenses}    convert to number    ${objBillsExpenses}
    ${objGroceryExpenses}    convert to number    ${objGroceryExpenses}
    ${Calculated_Expense}    evaluate    ${objHobbiesExpenses}+${objResidenceExpenses}+${objCarandTrafficExpenses}+${objBillsExpenses}+${objGroceryExpenses}
    should be equal as numbers    ${Calculated_Expense}    ${Total_Expenses}
    All_Expense_Validation    ${objHobbiesExpenses}    ${objResidenceExpenses}    ${objCarandTrafficExpenses}    ${objGroceryExpenses}    ${objBillsExpenses}

Accounts_Validation
    [Documentation]    This keyword validates Accounts select/deselect, corresponding amount update on select/deselect and also INCOME amount update.
    click element    ${objAccountsSelectionLink}
    wait until element is visible    ${objSavingsAcc1}    10s
    sleep    3s
    page should contain element    ${objSavingsAcc2}
    page should contain element    ${objSavingsAcc3}
    ${Selected_Amt}    get text    ${objAccTotalSelectedAmt}
    ${Acc_1_Amt}    get text    ${objSavingsAcc1Amt}
    ${Acc_2_Amt}    get text    ${objSavingsAcc2Amt}
    ${Acc_3_Amt}    get text    ${objSavingsAcc3Amt}
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Acc_1_Amt}    remove string    ${Acc_1_Amt}    €    ,
    ${Acc_2_Amt}    remove string    ${Acc_2_Amt}    €    ,    $
    ${Acc_3_Amt}    remove string    ${Acc_3_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Acc_1_Amt}    convert to number    ${Acc_1_Amt}
    ${Acc_2_Amt}    convert to number    ${Acc_2_Amt}
    ${Acc_3_Amt}    convert to number    ${Acc_3_Amt}
    ${Calculated_Amt}    evaluate    ${Acc_1_Amt}+${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Calculated_Amt}
    click element    ${objSavingsAcc1}
    sleep    1s
    page should contain    2 accounts selected
    ${Selected_Amt}    get text    ${objAccTotalSelectedAmt}
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Acc_1_2_Amt}    evaluate    ${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Acc_1_2_Amt}
    click element    ${objSavingsAcc2}
    sleep    1s
    page should contain element    ${objSelectedSavingsAcc3}
    ${Selected_Amt}    get text    ${objSvgAcc3AmtTop}
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Acc_3_Amt}
    click element    ${objSavingsAcc2}
    sleep    1s
    ${Selected_Amt}    get text    ${objTwoAcctSelctedAmtTop}
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Acc_1_2_Amt}    evaluate    ${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Acc_1_2_Amt}
    click element    ${objSavingsAcc1}
    sleep    1s
    ${Selected_Amt}    get text    ${objAccTotalSelectedAmt}
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Calculated_Amt}    evaluate    ${Acc_1_Amt}+${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Calculated_Amt}
    click element    ${objAccountsSelectionLink}
    sleep    2s
    wait until element is not visible    ${objSavingsAcc1}    10s

No_Account_Selected_Validation
    [Documentation]    Validates overview when no account is selected.
    click element    ${objAccountsSelectionLink}
    wait until element is visible    ${objSavingsAcc1}    10s
    sleep    2s
    page should contain element    ${objSavingsAcc2}
    page should contain element    ${objSavingsAcc3}
    click element    ${objSavingsAcc1}
    click element    ${objSavingsAcc2}
    click element    ${objSelectedSavingsAcc3}
    sleep    2s
    capture page screenshot
    page should contain element    ${objNoAccountSelected}
    page should contain element    ${objNoTxnMsg}
    page should contain element    ${objZeroBalance}
    click element    ${objSavingsAcc1}
    click element    ${objSavingsAcc2}
    click element    ${objUnselectedSavingsAcc3}
    sleep    2s
    capture page screenshot
    page should not contain element    ${objNoAccountSelected}
    page should not contain element    ${objNoTxnMsg}
    page should not contain element    ${objZeroBalance}

All_Income_Validation
    [Arguments]    ${Income_Source_1}    ${Income_Source_2}    ${Income_Source_3}
    [Documentation]    Calculates the total transactions income under a particular category and validates it with the amount displayed against that particular category.
    click element    ${objInvestmentIncome}
    click element    ${objFinancialInstitutesIncome}
    click element    ${objSalaryAndPensionIncome}
    sleep    1s
    ${Shares_Inc}    get text    ${objSharesIncome}
    ${Prprty_Inc}    get text    ${objPropertyIncome}
    ${Intrst_Inc}    get text    ${objInterestIncome}
    ${Arrears_Inc}    get text    ${objArrearsIncome}
    ${Incentive_Inc}    get text    ${objIncentiveIncome}
    ${Wages_Inc}    get text    ${objWagesIncome}
    ${Shares_Inc}    remove string    ${Shares_Inc}    €    ,
    ${Prprty_Inc}    remove string    ${Prprty_Inc}    €    ,
    ${Intrst_Inc}    remove string    ${Intrst_Inc}    €    ,
    ${Arrears_Inc}    remove string    ${Arrears_Inc}    €    ,
    ${Incentive_Inc}    remove string    ${Incentive_Inc}    €    ,
    ${Wages_Inc}    remove string    ${Wages_Inc}    €    ,
    ${Shares_Inc}    convert to number    ${Shares_Inc}
    ${Prprty_Inc}    convert to number    ${Prprty_Inc}
    ${Intrst_Inc}    convert to number    ${Intrst_Inc}
    ${Arrears_Inc}    convert to number    ${Arrears_Inc}
    ${Incentive_Inc}    convert to number    ${Incentive_Inc}
    ${Wages_Inc}    convert to number    ${Wages_Inc}
    ${Invstmnt_Calc}    evaluate    ${Shares_Inc}+${Prprty_Inc}
    should be equal as numbers    ${Invstmnt_Calc}    ${Income_Source_1}
    ${Fin_Instt_Calc}    evaluate    ${Arrears_Inc}+${Intrst_Inc}
    should be equal as numbers    ${Fin_Instt_Calc}    ${Income_Source_3}
    ${Sal_Calc}    evaluate    ${Incentive_Inc}+${Wages_Inc}
    should be equal as numbers    ${Sal_Calc}    ${Income_Source_2}

All_Expense_Validation
    [Arguments]    ${Expense_Type_1}    ${Expense_Type_2}    ${Expense_Type_3}    ${Expense_Type_4}    ${Expense_Type_5}
    [Documentation]    Calculates the total transactions expenses under a particular category and validates it with the amount displayed against that particular category.
    click element    ${objHobbiesExpenses}
    click element    ${objResidenceExpenses}
    click element    ${objCarandTrafficExpenses}
    click element    ${objBillsExpenses}
    click element    ${objGroceryExpenses}
    sleep    1s
    ${Game_Exp}    get text    ${objGamesExpense}
    ${Restr_Exp}    get text    ${objRestrauExpense}
    ${Novels_Exp}    get text    ${objNovelsExpense}
    ${Rent_Exp}    get text    ${objRentExpense}
    ${Fuel_Exp}    get text    ${objFuelsExpense}
    ${Grcry_Exp}    get text    ${objGroceryExpense}
    ${Kiosks_Exp}    get text    ${objKiosksExpense}
    ${Electricity_Exp}    get text    ${objElectricExpense}
    ${Tax_Exp}    get text    ${objPropertyTaxExpense}
    ${Game_Exp}    remove string    ${Game_Exp}    €    ,
    ${Restr_Exp}    remove string    ${Restr_Exp}    €    ,
    ${Novels_Exp}    remove string    ${Novels_Exp}    €    ,
    ${Rent_Exp}    remove string    ${Rent_Exp}    €    ,
    ${Fuel_Exp}    remove string    ${Fuel_Exp}    €    ,
    ${Grcry_Exp}    remove string    ${Grcry_Exp}    €    ,
    ${Kiosks_Exp}    remove string    ${Kiosks_Exp}    €    ,
    ${Electricity_Exp}    remove string    ${Electricity_Exp}    €    ,
    ${Tax_Exp}    remove string    ${Tax_Exp}    €    ,
    ${Game_Exp}    convert to number    ${Game_Exp}
    ${Restr_Exp}    convert to number    ${Restr_Exp}
    ${Novels_Exp}    convert to number    ${Novels_Exp}
    ${Rent_Exp}    convert to number    ${Rent_Exp}
    ${Fuel_Exp}    convert to number    ${Fuel_Exp}
    ${Grcry_Exp}    convert to number    ${Grcry_Exp}
    ${Kiosks_Exp}    convert to number    ${Kiosks_Exp}
    ${Electricity_Exp}    convert to number    ${Electricity_Exp}
    ${Tax_Exp}    convert to number    ${Tax_Exp}
    ${Hobbies_Calc}    evaluate    ${Game_Exp}+${Restr_Exp}+${Novels_Exp}
    ${Food&Grcry_Exp}    evaluate    ${Grcry_Exp}+${Kiosks_Exp}
    ${Bills_Exp}    evaluate    ${Electricity_Exp}+${Tax_Exp}
    should be equal as numbers    ${Hobbies_Calc}    ${Expense_Type_1}
    should be equal as numbers    ${Rent_Exp}    ${Expense_Type_2}
    should be equal as numbers    ${Fuel_Exp}    ${Expense_Type_3}
    should be equal as numbers    ${Food&Grcry_Exp}    ${Expense_Type_4}
    should be equal as numbers    ${Bills_Exp}    ${Expense_Type_5}

Ovrvw_Validate_Income_Txns
    [Documentation]    Validates each transactions beneficiary and amount against the beneficiary and amount of the popup of that particular transaction under Income category.
    ${Status}    run keyword and return status    page should contain element    ${objSharesIncome}
    run keyword if    ${Status}==False    click element    ${objInvestmentIncome}
    sleep    1s
    click element    ${objSharesIncome}
    sleep    1s
    ${Count}    get matching xpath count    .//*[@id='wrapper']//div[@class='transaction income list-item']/a[@class='list-item-content']
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Txn_amt}    get text    xpath=.//*[@id='wrapper']//div[1]/span//div[${Index}]/a//div[@class='amount']//span
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[1]/span//div[${Index}]/a//div[@class='tag']
    \    ${Txn_Bene}    run keyword if    ${Status}==True    Remove_Income_Tags    ${Index}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[1]/span//div[${Index}]/a//div[@class='beneficiary']
    \    click element    xpath=.//*[@id='wrapper']//div[${Index}]/a[@class='list-item-content']
    \    wait until page contains element    ${objPopupTxnHeader}    10s
    \    ${PopUp_Txn_Amt}    get text    ${objPopupTxnAmt}
    \    ${PopUp_Txn_Bene}    get text    ${objPopupTxnBeneficiary}
    \    should be equal as strings    ${Txn_amt}    ${PopUp_Txn_Amt}
    \    should contain    ${PopUp_Txn_Bene}    ${Txn_Bene}
    \    click element    ${objPopupClose}
    \    wait until page does not contain element    ${objPopupTxnHeader}    10s
    \    sleep    1s
    click element    ${objSharesIncome}
    sleep    1s

Remove_Income_Tags
    [Arguments]    ${Index}
    [Documentation]    removes tags from the debtor under income categories.
    ${iCount}    get matching xpath count    .//*[@id='wrapper']//div[@class='transaction income list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='transaction income list-item'][${Index}]//div[@class='beneficiary']
    : FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    get text    xpath=.//*[@id='wrapper']//div[@class='transaction income list-item'][${Index}]//div[2]/div[@class='tag'][${Counter}]
    \    ${Beneficiary}    remove string    ${Beneficiary}    ${Txn_Tags}
    [Return]    ${Beneficiary}

Ovrvw_Validate_Expenses_Txns
    [Documentation]    Validates each transactions beneficiary and amount against the beneficiary and amount of the popup of that particular transaction under expenses category.
    ${Status}    run keyword and return status    page should contain element    ${objNovelsExpense}
    run keyword if    ${Status}==False    click element    ${objHobbiesExpenses}
    sleep    1s
    click element    ${objNovelsExpense}
    sleep    1s
    ${Count}    get matching xpath count    .//*[@id='wrapper']//div[2]/span//div[@class='transaction expenses list-item']/a[@class='list-item-content']
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Txn_amt}    get text    xpath=.//*[@id='wrapper']//span/div//div[@class='transaction expenses list-item'][${Index}]//div[@class='amount']//span
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Txn_Bene}    run keyword if    ${Status}==True    Remove_Expenses_Tags    ${Index}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[2]/span//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    click element    xpath=.//*[@id='wrapper']//div[2]/span//div[@class='transaction expenses list-item'][${Index}]/a[@class='list-item-content']
    \    wait until page contains element    ${objPopupTxnHeader}    10s
    \    ${PopUp_Txn_Amt}    get text    ${objPopupTxnAmt}
    \    ${PopUp_Txn_Bene}    get text    ${objPopupTxnBeneficiary}
    \    should be equal as strings    ${Txn_amt}    ${PopUp_Txn_Amt}
    \    should contain    ${PopUp_Txn_Bene}    ${Txn_Bene}
    \    click element    ${objPopupClose}
    \    wait until page does not contain element    ${objPopupTxnHeader}    10s
    \    sleep    1s

Remove_Expenses_Tags
    [Arguments]    ${Index}
    [Documentation]    removes tags from the beneficiary under expenses categories.
    ${iCount}    get matching xpath count    .//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    : FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    get text    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[2]/div[@class='tag'][${Counter}]
    \    ${Beneficiary}    remove string    ${Beneficiary}    ${Txn_Tags}
    ${EMPTY}
    [Return]    ${Beneficiary}

Open_Transactions
    [Documentation]    Displays all the transactions under the categories.
    click element    ${objHobbiesExpenses}
    wait until page contains element    ${objNovelsExpense}
    capture page screenshot
    click element    ${objResidenceExpenses}
    wait until page contains element    ${objRentExpense}
    capture page screenshot
    click element    ${objCarandTrafficExpenses}
    wait until page contains element    ${objFuelsExpense}
    capture page screenshot
    click element    ${objBillsExpenses}
    wait until page contains element    ${objElectricExpense}
    capture page screenshot
    click element    ${objGroceryExpenses}
    wait until page contains element    ${objKiosksExpense}
    capture page screenshot
    click element    ${objGamesExpense}
    click element    ${objRestrauExpense}
    click element    ${objNovelsExpense}
    click element    ${objRentExpense}
    click element    ${objFuelsExpense}
    click element    ${objElectricExpense}
    click element    ${objPropertyTaxExpense}
    click element    ${objGroceryExpense}
    click element    ${objKiosksExpense}
    capture page screenshot

Transactions_Beneficiary_List
    [Documentation]    It fetches all the transactions beneficiaries and returns a beneficiary list having redundant beneficiary entries due to multiple transactions against those beneficiaries.
    ...    This is created to use the list for further processing in other keywords.
    ${Beneficiary_List}    create list    List
    ${Count}    get matching xpath count    ${objExpensesGamesTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Games Accesories')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Games Accesories')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesRestrauTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Cafes and Restaurants')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Cafes and Restaurants')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesNovelsTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Novels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Novels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesRentTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Rent')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Rent')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesFuelsTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Fuels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Fuels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesElectricTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Electric')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Electric')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesPropertyTaxTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Property Tax')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Property Tax')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesGrcryTaxTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Grocery stores')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Grocery stores')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objExpensesKiosksTaxTxnBeneficiaryxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Kiosks')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${Status}    run keyword and return status    page should contain element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Kiosks')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    [Return]    ${Beneficiary_List}

Remove_Tags_For_Txns
    [Arguments]    ${Index}    ${Beneficiary}
    ${iCount}    get matching xpath count    .//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    : FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    get text    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[2]/div[@class='tag'][${Counter}]
    \    ${Beneficiary}    remove string    ${Beneficiary}    ${Txn_Tags}
    [Return]    ${Beneficiary}

Validate_Five_Most_Expenses
    [Arguments]    ${Beneficiary_List}
    [Documentation]    1. Validates the number of times the the transaction is done to beneficiary under all categories with the number of times transaction done for that beneficiary displayed under most expenses list.
    ...
    ...
    ...
    ...    2. Also validates that those beneficiaries not listed under most expenses list are having less transactions than the one listed under most expenses.
    Log    ${Beneficiary_List}
    ${Beneficiaries}    remove duplicates    ${Beneficiary_List}
    ${Count}    get matching xpath count    ${objMostExpensesBenefxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Most_Exp_Benef}    get text    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='beneficiary']
    \    ${Bene_Count}    get count    ${Beneficiary_List}    ${Most_Exp_Benef}
    \    ${iCount}    get text    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='amount']/div
    \    ${Exp_Count}    split string    ${iCount}    (
    \    ${MostExp_Count}    set variable    ${Exp_Count[1]}
    \    ${MostExp_Count}    remove string    ${MostExp_Count}    )    x
    \    should be equal as strings    ${Bene_Count}    ${MostExp_Count}
    \    remove values from list    ${Beneficiaries}    ${Most_Exp_Benef}
    Log    ${Beneficiaries}
    ${Count1}    get length    ${Beneficiaries}
    : FOR    ${Index}    IN RANGE    1    ${Count1}
    \    ${Bene_Count}    get count    ${Beneficiary_List}    ${Beneficiaries[${Index}]}
    \    ${MostExp_Count}    convert to number    ${MostExp_Count}
    \    should be true    ${MostExp_Count}>=${Bene_Count}

Most_Expenses_Categories_Validation
    [Documentation]    validates that the most expenses categories listed under most expenses table is valid and the corresponding benefciary has a transaction entry in that category.
    ${Count}    get matching xpath count    ${objMostExpensesBenefxpath}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Most_Exp_Benef}    get text    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='beneficiary']
    \    ${Category}    get text    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='subCategorys']
    \    Validate_Category_Presence    ${Category}    ${Most_Exp_Benef}

Validate_Category_Presence
    [Arguments]    ${Category}    ${Most_Exp_Benef}
    [Documentation]    validates whether the beneficiary listed under most expenses table is present in the category passed from the argument.
    ${Category_List}    split string    ${Category}    ,
    ${Length}    get length    ${Category_List}
    : FOR    ${Index}    IN RANGE    ${Length}
    \    ${Ctgry}    set variable    ${Category_List[${Index}]}
    \    ${Benef_List}    Get_Specific_Ctgry_Beneficiary_List    ${Ctgry}
    \    list should contain value    ${Benef_List}    ${Most_Exp_Benef}

Category_beneficiaries

Get_Specific_Ctgry_Beneficiary_List
    [Arguments]    ${Ctgry}
    [Documentation]    Creates and returns a list of beneficiary under a specific category which is passed as an argument.
    ${count}    get matching xpath count    .//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item']//div[@class='beneficiary']
    ${Benef_List}    create list    Null
    : FOR    ${Index}    IN RANGE    1    ${count}+1
    \    ${Beneficiary}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    ${iCount}    get matching xpath count    .//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${iCount} >=1    MostExp_Remove_Tags    ${Index}    ${Beneficiary}
    \    ...    ${iCount}    ${Ctgry}
    \    ...    ELSE    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']
    \    append to list    ${Benef_List}    ${Beneficiary}
    Log    ${Benef_List}
    [Return]    ${Benef_List}

MostExp_Remove_Tags
    [Arguments]    ${Index}    ${Beneficiary}    ${iCount}    ${Ctgry}
    [Documentation]    removes tags from the beneficiary fetched.
    ${Benef}    set variable    ${Beneficiary}
    : FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    get text    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag'][${Counter}]
    \    ${Benef}    remove string    ${Benef}    ${Txn_Tags}
    [Return]    ${Benef}

Most_Expenses_Amount_Validate
    [Documentation]    calculates the amount of all the transactions taken place under expenses for the beneficiary listed under most expenses table and matches it against the amount for that beneficiary under most expenses table.
    ${count}    get matching xpath count    ${objMostExpensesBenefxpath}
    : FOR    ${Index}    IN RANGE    1    ${count}+1
    \    ${Most_Exp_Amt}    get text    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='amount']//span
    \    ${Most_Exp_Amt}    remove string    ${Most_Exp_Amt}    -€    ,
    \    ${Most_Exp_Amt}    convert to number    ${Most_Exp_Amt}
    \    ${Most_Exp_Benef}    get text    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='beneficiary']
    \    ${Total Amount}    run keyword    Most_Expense_Amount_Calc    ${Most_Exp_Benef}
    \    should be equal as numbers    ${Most_Exp_Amt}    ${Total Amount}

Beneficiary_Total_Expense
    [Arguments]    ${Index}    ${Total Amount}
    [Documentation]    fetches the amount, processes it and returns the amount value.
    ${Bene_Amt}    execute javascript    return document.querySelectorAll('.subcategory a.list-item-content .beneficiary')[${Index}].nextSibling.innerText.trim();
    ${Bene_Amt}    remove string    ${Bene_Amt}    -€    ,    call_split
    ${Bene_Amt}    convert to number    ${Bene_Amt}
    ${Total Amount}    evaluate    ${Total Amount}+${Bene_Amt}
    [Return]    ${Total Amount}

Most_Expense_Amount_Calc
    [Arguments]    ${Most_Exp_Benef}
    [Documentation]    calculates total amount of the transactions for a particular beneficiary passed from most expenses table under a particular category and returns the value.
    ${count}    get matching xpath count    ${objExpensesTxnBeneficiariesxpath}
    ${Total Amount}    set variable    0
    : FOR    ${Index}    IN RANGE    ${count}
    \    ${Beneficiary}    execute javascript    return document.querySelectorAll('.subcategory a.list-item-content .beneficiary')[${Index}].innerText
    \    ${Status}    run keyword and return status    should contain    ${Beneficiary}    ${Most_Exp_Benef}
    \    ${Total Amount}    run keyword if    ${Status}==True    Beneficiary_Total_Expense    ${Index}    ${Total Amount}
    \    ...    ELSE    set variable    ${Total Amount}
    Log    ${Total Amount}
    [Return]    ${Total Amount}

No_Income_Page_Validate
    Open Excel    ${EXECDIR}/Test_Data/GlobalTestData.xls
    @{List}=    Get Row Values    Overview    2
    Click Element    ${objOverviewDateIconOpen}
    sleep    1s
    input text    ${objFromDate}    ${List[1][1]}
    sleep    1s
    capture page screenshot
    input text    ${objToDate}    ${List[2][1]}
    sleep    1s
    capture page screenshot
    Click Element    ${objOverviewHeaderActive}
    wait until page contains element    ${objZeroIncomeMessage}
    ${Income}    get text    ${objTotalIncome}
    should be equal as strings    ${Income}    €0.00

No_Expenses_Page_Validate
    Open Excel    ${EXECDIR}/Test_Data/GlobalTestData.xls
    @{List}=    Get Row Values    Overview    3
    sleep    1s
    input text    ${objFromDate}    ${List[1][1]}
    sleep    1s
    capture page screenshot
    input text    ${objToDate}    ${List[2][1]}
    sleep    1s
    capture page screenshot
    Click Element    ${objOverviewHeaderActive}
    wait until page contains element    ${objZeroExpensesMessage}
    ${Income}    get text    ${objTotalExpenses}
    should be equal as strings    ${Income}    €0.00
    Click Element    ${objOverviewDateIconClose}
