*** Settings ***
Library           OperatingSystem
Library           Selenium2Library
Library           ExcelLibrary
Library           Collections
Library           DateTime
Library           AppiumLibrary
Variables         ../../Common_Resources/objRepPFM.py
Resource          ../../Common_Resources/common_resources.txt

*** Keywords ***
Overview_Date_Selection
    Open Excel    ${EXECDIR}/PFM/Test_Data/GlobalTestData.xls
    @{List}=    Get Row Values    Overview    1
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.click element    ${objOverviewDateIconOpen}
    sleep    2s
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.clear text    ${objFromDate}
    sleep    1s
    AppiumLibrary.input text    ${objFromDate}    ${List[1][1]}
    sleep    3s
    AppiumLibrary.click element    ${objOverviewHeaderActive}
    sleep    1s
    AppiumLibrary.Capture Page Screenshot

Overview_section_Validation
    sleep    2s
    AppiumLibrary.Page Should Contain Element    ${objOverviewHeaderActive}
    AppiumLibrary.Page Should Contain Element    ${objTagsHeaderInactive}
    AppiumLibrary.Page Should Contain Element    ${objFinancialStatusHeaderInactive}
    AppiumLibrary.Capture Page Screenshot
    ${Curr_Month}    Assessment_Period_Validation
    AppiumLibrary.Page Should Contain Element    ${objHeading1}
    AppiumLibrary.Page Should Contain Element    ${objHeading2}
    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//h2[contains(.,'Highlights for ${Curr_Month}')]
    AppiumLibrary.Page Should Contain text    Monthly Budgets
    AppiumLibrary.Page Should Contain text    Biggest expenses
    AppiumLibrary.Page Should Contain text    Most expenses
    AppiumLibrary.Page Should Contain text    Daily spending
    AppiumLibrary.Page Should Contain text    Time based Comparison
    AppiumLibrary.Page Should Contain Element    ${objCategorySalary}
    AppiumLibrary.Page Should Contain Element    ${objCategoryInvstmt}
    AppiumLibrary.Page Should Contain Element    ${objCategoryFinInstt}
    AppiumLibrary.Page Should Contain Element    ${objCategoryResidence}
    AppiumLibrary.Page Should Contain Element    ${objCategoryCarsandTraffic}
    AppiumLibrary.Page Should Contain Element    ${objCategoryFoodandShop}
    AppiumLibrary.Page Should Contain Element    ${objCategoryHobbies}
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.Page Should Contain Element    ${objCategoryBills}
    ${Total_Income}    AppiumLibrary.get element attribute    ${objTotalIncomeAndroid}    textContent
    ${Total_Expenses}    AppiumLibrary.get element attribute    ${objTotalExpensesAndroid}    textContent
    Comment    ${Income_Highlights}    AppiumLibrary.get element attribute    ${objIncomeInHighlights}    textContent
    Comment    ${Expenses_Highlights}    AppiumLibrary.get element attribute    ${objExpensesInHighlights}    textContent
    Comment    should be equal as strings    ${Total_Income}    ${Income_Highlights}
    Comment    should be equal as strings    ${Total_Expenses}    ${Expenses_Highlights}
    Comment    ${Income_Highlights}    remove string    ${Income_Highlights}    €    ,
    Comment    ${Expenses_Highlights}    remove string    ${Expenses_Highlights}    €    ,    -
    Comment    ${Income_Highlights}    convert to number    ${Income_Highlights}
    Comment    ${Expenses_Highlights}    convert to number    ${Expenses_Highlights}
    Comment    ${Money_Left}    evaluate    ${Income_Highlights} - ${Expenses_Highlights}
    Comment    ${Money_Left_In_Highlights}    AppiumLibrary.get element attribute    ${objMoneyLeftInHighlights}    textContent
    Comment    ${Money_Left_In_Highlights}    remove string    ${Money_Left_In_Highlights}    €    ,
    Comment    ${Money_Left_In_Highlights}    convert to number    ${Money_Left_In_Highlights}
    Comment    should be equal as strings    ${Money_Left_In_Highlights}    ${Money_Left}
    [Return]    ${Total_Income}    ${Total_Expenses}

Assessment_Period_Validation
    ${Curr_Dt}    get current date
    ${Curr_Dt}    convert date    ${Curr_Dt}    result_format=%d.%m.%Y
    ${Dt}    split string    ${Curr_Dt}    .
    ${Months}    create list    list    January    February    March    April
    ...    May    June    July    August    September    October
    ...    November    December
    : FOR    ${Index}    IN RANGE    1    13
    \    ${Curr_Month}    run keyword if    ${Dt[1]}==${Index}    set variable    ${Months[${Index}]}
    \    ${Previous_Month}    run keyword if    ${Dt[1]}==${Index}    set variable    ${Months[${Index-1}]}
    \    ${iCounter}    convert to integer    ${Dt[1]}
    \    exit for loop if    ${iCounter}==${Index}
    log    ${Curr_Month}
    ${Start_Dt}    AppiumLibrary.get element attribute    ${objAssessmentTimePeriodStart}    textContent
    ${End_Dt}    AppiumLibrary.get element attribute    ${objAssessmentTimePeriodEnd}    textContent
    should contain    ${End_Dt}    ${Curr_Month}    ${Dt[0]}
    should contain    ${Start_Dt}    ${Previous_Month}    ${Dt[0]}
    AppiumLibrary.Capture Page Screenshot
    [Return]    ${Curr_Month}

Total_Income_Validation
    [Arguments]    ${Total_Income}
    ${Total_Income}    remove string    ${Total_Income}    €    ,
    ${Total_Income}    convert to number    ${Total_Income}
    ${Income_Source_1}    AppiumLibrary.get element attribute    ${objInvestmentIncomeAndroid}    textContent
    ${Income_Source_2}    AppiumLibrary.get element attribute    ${objSalaryAndPensionIncomeAndroid}    textContent
    ${Income_Source_3}    AppiumLibrary.get element attribute    ${objFinancialInstitutesIncomeAndroid}    textContent
    ${Income_Source_1}    remove string    ${Income_Source_1}    €    ,
    ${Income_Source_2}    remove string    ${Income_Source_2}    €    ,
    ${Income_Source_3}    remove string    ${Income_Source_3}    €    ,
    ${Income_Source_1}    convert to number    ${Income_Source_1}
    ${Income_Source_2}    convert to number    ${Income_Source_2}
    ${Income_Source_3}    convert to number    ${Income_Source_3}
    ${Evaluated_Income}    evaluate    ${Income_Source_1}+${Income_Source_2}+${Income_Source_3}
    should be equal as numbers    ${Total_Income}    ${Evaluated_Income}
    All_Income_Validation    ${Income_Source_1}    ${Income_Source_2}    ${Income_Source_3}

Total_Expenses_Validation
    [Arguments]    ${Total_Expenses}
    ${Total_Expenses}    remove string    ${Total_Expenses}    €    ,
    ${Total_Expenses}    convert to number    ${Total_Expenses}
    ${Hobbies_Exp}    AppiumLibrary.get element attribute    ${objHobbiesExpensesAndroid}    textContent
    ${Residence_Exp}    AppiumLibrary.get element attribute    ${objResidenceExpensesAndroid}    textContent
    ${CarandTraffic_Exp}    AppiumLibrary.get element attribute    ${objCarandTrafficExpensesAndroid}    textContent
    ${Bills_Exp}    AppiumLibrary.get element attribute    ${objBillsExpensesAndroid}    textContent
    ${Grocery_Exp}    AppiumLibrary.get element attribute    ${objGroceryExpensesAndroid}    textContent
    ${Hobbies_Exp}    remove string    ${Hobbies_Exp}    €    ,
    ${Residence_Exp}    remove string    ${Residence_Exp}    €    ,
    ${CarandTraffic_Exp}    remove string    ${CarandTraffic_Exp}    €    ,
    ${Bills_Exp}    remove string    ${Bills_Exp}    €    ,
    ${Grocery_Exp}    remove string    ${Grocery_Exp}    €    ,
    ${Hobbies_Exp}    convert to number    ${Hobbies_Exp}
    ${Residence_Exp}    convert to number    ${Residence_Exp}
    ${CarandTraffic_Exp}    convert to number    ${CarandTraffic_Exp}
    ${Bills_Exp}    convert to number    ${Bills_Exp}
    ${Grocery_Exp}    convert to number    ${Grocery_Exp}
    ${Calculated_Expense}    evaluate    ${Hobbies_Exp}+${Residence_Exp}+${CarandTraffic_Exp}+${Bills_Exp}+${Grocery_Exp}
    should be equal as numbers    ${Calculated_Expense}    ${Total_Expenses}
    All_Expense_Validation    ${Hobbies_Exp}    ${Residence_Exp}    ${CarandTraffic_Exp}    ${Bills_Exp}    ${Grocery_Exp}

Accounts_Validation
    AppiumLibrary.click element    ${objAccountsSelectionLink}
    AppiumLibrary.wait until page contains element    ${objSavingsAcc1}    10s
    sleep    3s
    AppiumLibrary.Page Should Contain Element    ${objSavingsAcc2}
    AppiumLibrary.Page Should Contain Element    ${objSavingsAcc3}
    ${Selected_Amt}    AppiumLibrary.get element attribute    ${objAccTotalSelectedAmt}    textContent
    ${Acc_1_Amt}    AppiumLibrary.get element attribute    ${objSavingsAcc1Amt}    textContent
    ${Acc_2_Amt}    AppiumLibrary.get element attribute    ${objSavingsAcc2Amt}    textContent
    ${Acc_3_Amt}    AppiumLibrary.get element attribute    ${objSavingsAcc3Amt}    textContent
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Acc_1_Amt}    remove string    ${Acc_1_Amt}    €    ,
    ${Acc_2_Amt}    remove string    ${Acc_2_Amt}    €    ,    $
    ${Acc_3_Amt}    remove string    ${Acc_3_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Acc_1_Amt}    convert to number    ${Acc_1_Amt}
    ${Acc_2_Amt}    convert to number    ${Acc_2_Amt}
    ${Acc_3_Amt}    convert to number    ${Acc_3_Amt}
    ${Calculated_Amt}    evaluate    ${Acc_1_Amt}+${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Calculated_Amt}
    AppiumLibrary.click element    ${objSavingsAcc1}
    sleep    1s
    AppiumLibrary.Page Should Contain text    2 accounts selected
    ${Selected_Amt}    AppiumLibrary.get element attribute    ${objAccTotalSelectedAmt}    textContent
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Acc_1_2_Amt}    evaluate    ${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Acc_1_2_Amt}
    AppiumLibrary.click element    ${objSavingsAcc2}
    sleep    1s
    AppiumLibrary.Page Should Contain Element    ${objSelectedSavingsAcc3}
    ${Selected_Amt}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='account active-accounts']/span[contains(.,'Savings Account #3')]//..//span[@class='balance']/span    textContent
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Acc_3_Amt}
    AppiumLibrary.click element    ${objSavingsAcc2}
    sleep    1s
    ${Selected_Amt}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='account active-accounts']/span[contains(.,'2 accounts selected')]//..//span[@class='balance']/span    textContent
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Acc_1_2_Amt}    evaluate    ${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Acc_1_2_Amt}
    AppiumLibrary.click element    ${objSavingsAcc1}
    sleep    1s
    ${Selected_Amt}    AppiumLibrary.get element attribute    ${objAccTotalSelectedAmt}    textContent
    ${Selected_Amt}    remove string    ${Selected_Amt}    €    ,
    ${Selected_Amt}    convert to number    ${Selected_Amt}
    ${Calculated_Amt}    evaluate    ${Acc_1_Amt}+${Acc_2_Amt}+${Acc_3_Amt}
    should be equal as numbers    ${Selected_Amt}    ${Calculated_Amt}
    AppiumLibrary.click element    ${objAccountsSelectionLink}
    sleep    2s
    AppiumLibrary.Wait Until Page Does Not contain Element    ${objSavingsAcc1}    10s

No_Account_Selected_Validation
    AppiumLibrary.click element    ${objAccountsSelectionLink}
    AppiumLibrary.wait until page contains element    ${objSavingsAcc1}    10s
    sleep    2s
    AppiumLibrary.Page Should Contain Element    ${objSavingsAcc2}
    AppiumLibrary.Page Should Contain Element    ${objSavingsAcc3}
    AppiumLibrary.click element    ${objSavingsAcc1}
    AppiumLibrary.click element    ${objSavingsAcc2}
    AppiumLibrary.click element    ${objSelectedSavingsAcc3}
    sleep    2s
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.Page Should Contain Element    ${objNoAccountSelected}
    AppiumLibrary.Page Should Contain Element    ${objNoTxnMsg}
    AppiumLibrary.Page Should Contain Element    ${objZeroBalance}
    AppiumLibrary.click element    ${objSavingsAcc1}
    AppiumLibrary.click element    ${objSavingsAcc2}
    AppiumLibrary.click element    ${objUnselectedSavingsAcc3}
    sleep    2s
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.Page Should not Contain Element    ${objNoAccountSelected}
    AppiumLibrary.Page Should not Contain Element    ${objNoTxnMsg}
    AppiumLibrary.Page Should not Contain Element    ${objZeroBalance}

All_Income_Validation
    [Arguments]    ${Income_Source_1}    ${Income_Source_2}    ${Income_Source_3}
    AppiumLibrary.click element    ${objInvestmentIncomeAndroid}
    AppiumLibrary.click element    ${objFinancialInstitutesIncomeAndroid}
    AppiumLibrary.click element    ${objSalaryAndPensionIncomeAndroid}
    sleep    1s
    ${Shares_Inc}    AppiumLibrary.get element attribute    ${objSharesIncome}    textContent
    ${Prprty_Inc}    AppiumLibrary.get element attribute    ${objPropertyIncome}    textContent
    ${Intrst_Inc}    AppiumLibrary.get element attribute    ${objInterestIncome}    textContent
    ${Arrears_Inc}    AppiumLibrary.get element attribute    ${objArrearsIncome}    textContent
    ${Incentive_Inc}    AppiumLibrary.get element attribute    ${objIncentiveIncome}    textContent
    ${Wages_Inc}    AppiumLibrary.get element attribute    ${objWagesIncome}    textContent
    ${Shares_Inc}    remove string    ${Shares_Inc}    €    ,
    ${Prprty_Inc}    remove string    ${Prprty_Inc}    €    ,
    ${Intrst_Inc}    remove string    ${Intrst_Inc}    €    ,
    ${Arrears_Inc}    remove string    ${Arrears_Inc}    €    ,
    ${Incentive_Inc}    remove string    ${Incentive_Inc}    €    ,
    ${Wages_Inc}    remove string    ${Wages_Inc}    €    ,
    ${Shares_Inc}    convert to number    ${Shares_Inc}
    ${Prprty_Inc}    convert to number    ${Prprty_Inc}
    ${Intrst_Inc}    convert to number    ${Intrst_Inc}
    ${Arrears_Inc}    convert to number    ${Arrears_Inc}
    ${Incentive_Inc}    convert to number    ${Incentive_Inc}
    ${Wages_Inc}    convert to number    ${Wages_Inc}
    ${Invstmnt_Calc}    evaluate    ${Shares_Inc}+${Prprty_Inc}
    should be equal as numbers    ${Invstmnt_Calc}    ${Income_Source_1}
    ${Fin_Instt_Calc}    evaluate    ${Arrears_Inc}+${Intrst_Inc}
    should be equal as numbers    ${Fin_Instt_Calc}    ${Income_Source_3}
    ${Salary_inc}    evaluate    ${Incentive_Inc}+${Wages_Inc}
    should be equal as numbers    ${Salary_inc}    ${Income_Source_2}

All_Expense_Validation
    [Arguments]    ${Expense_Type_1}    ${Expense_Type_2}    ${Expense_Type_3}    ${Expense_Type_4}    ${Expense_Type_5}
    AppiumLibrary.click element    ${objHobbiesExpensesAndroid}
    AppiumLibrary.click element    ${objResidenceExpensesAndroid}
    AppiumLibrary.click element    ${objCarandTrafficExpensesAndroid}
    AppiumLibrary.click element    ${objBillsExpensesAndroid}
    AppiumLibrary.click element    ${objGroceryExpensesAndroid}
    sleep    1s
    ${Game_Exp}    AppiumLibrary.get element attribute    ${objGamesExpense}    textContent
    ${Restr_Exp}    AppiumLibrary.get element attribute    ${objRestrauExpense}    textContent
    ${Novels_Exp}    AppiumLibrary.get element attribute    ${objNovelsExpense}    textContent
    ${Rent_Exp}    AppiumLibrary.get element attribute    ${objRentExpense}    textContent
    ${Fuel_Exp}    AppiumLibrary.get element attribute    ${objFuelsExpense}    textContent
    ${Grcry_Exp}    AppiumLibrary.get element attribute    ${objGroceryExpense}    textContent
    ${Kiosks_Exp}    AppiumLibrary.get element attribute    ${objKiosksExpense}    textContent
    ${Electricity_Exp}    AppiumLibrary.get element attribute    ${objElectricExpense}    textContent
    ${Tax_Exp}    AppiumLibrary.get element attribute    ${objPropertyTaxExpense}    textContent
    ${Game_Exp}    remove string    ${Game_Exp}    €    ,
    ${Restr_Exp}    remove string    ${Restr_Exp}    €    ,
    ${Novels_Exp}    remove string    ${Novels_Exp}    €    ,
    ${Rent_Exp}    remove string    ${Rent_Exp}    €    ,
    ${Fuel_Exp}    remove string    ${Fuel_Exp}    €    ,
    ${Grcry_Exp}    remove string    ${Grcry_Exp}    €    ,
    ${Kiosks_Exp}    remove string    ${Kiosks_Exp}    €    ,
    ${Electricity_Exp}    remove string    ${Electricity_Exp}    €    ,
    ${Tax_Exp}    remove string    ${Tax_Exp}    €    ,
    ${Game_Exp}    convert to number    ${Game_Exp}
    ${Restr_Exp}    convert to number    ${Restr_Exp}
    ${Novels_Exp}    convert to number    ${Novels_Exp}
    ${Rent_Exp}    convert to number    ${Rent_Exp}
    ${Fuel_Exp}    convert to number    ${Fuel_Exp}
    ${Grcry_Exp}    convert to number    ${Grcry_Exp}
    ${Kiosks_Exp}    convert to number    ${Kiosks_Exp}
    ${Electricity_Exp}    convert to number    ${Electricity_Exp}
    ${Tax_Exp}    convert to number    ${Tax_Exp}
    ${Hobbies_Calc}    evaluate    ${Game_Exp}+${Restr_Exp}+${Novels_Exp}
    ${Food&Grcry_Exp}    evaluate    ${Grcry_Exp}+${Kiosks_Exp}
    ${Bills_Exp}    evaluate    ${Electricity_Exp}+${Tax_Exp}
    should be equal as numbers    ${Hobbies_Calc}    ${Expense_Type_1}
    should be equal as numbers    ${Rent_Exp}    ${Expense_Type_2}
    should be equal as numbers    ${Fuel_Exp}    ${Expense_Type_3}
    should be equal as numbers    ${Bills_Exp}    ${Expense_Type_4}
    should be equal as numbers    ${Food&Grcry_Exp}    ${Expense_Type_5}

Ovrvw_Validate_Income_Txns
    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    ${objSharesIncome}
    run keyword if    ${Status}==False    AppiumLibrary.click element    ${objInvestmentIncomeAndroid}
    sleep    1s
    AppiumLibrary.click element    ${objSharesIncome}
    sleep    1s
    ${Count}    get elements    xpath=.//*[@id='wrapper']//div[@class='transaction income list-item']/a[@class='list-item-content']
    ${Count}    get length    ${Count}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Txn_amt}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[1]/span//div[${Index}]/a//div[@class='amount']//span    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[1]/span//div[${Index}]/a//div[@class='tag']
    \    ${Txn_Bene}    run keyword if    ${Status}==True    Income_Tags    ${Index}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[1]/span//div[${Index}]/a//div[@class='beneficiary']    textContent
    \    AppiumLibrary.click element    xpath=.//*[@id='wrapper']//div[${Index}]/a[@class='list-item-content']
    \    AppiumLibrary.wait until page contains element    ${objPopupTxnHeader}    10s
    \    sleep    4s
    \    AppiumLibrary.Capture Page Screenshot
    \    ${objPopupTxnAmtAndroid1}    AppiumLibrary.get element attribute    ${objPopupTxnAmtAndroid}    textContent
    \    ${objPopupTxnAmtAndroid1}    remove string    ${objPopupTxnAmtAndroid1}    call_split
    \    ${PopUp_Txn_Bene}    AppiumLibrary.get element attribute    ${objPopupTxnBeneficiary}    textContent
    \    should be equal as strings    ${Txn_amt}    ${objPopupTxnAmtAndroid1}
    \    should contain    ${PopUp_Txn_Bene}    ${Txn_Bene}
    \    AppiumLibrary.click element    ${objPopupClose}
    \    AppiumLibrary.Wait Until Page Does Not contain Element    ${objPopupTxnHeader}    10s
    \    sleep    2s
    AppiumLibrary.click element    ${objSharesIncome}
    sleep    1s

Income_Tags
    [Arguments]    ${Index}
    ${iCount}    get elements    xpath=.//*[@id='wrapper']//div[@class='transaction income list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    ${iCount}    get length    ${iCount}
    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='transaction income list-item'][${Index}]//div[@class='beneficiary']    textContent
    : FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='transaction income list-item'][${Index}]//div[2]/div[@class='tag'][${Counter}]    textContent
    \    ${Beneficiary}    remove string    ${Beneficiary}    ${Txn_Tags}
    [Return]    ${Beneficiary}

Ovrvw_Validate_Expenses_Txns
    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    ${objNovelsExpenseAndroid}
    run keyword if    ${Status}==False    AppiumLibrary.click element    ${objHobbiesExpensesAndroid}
    sleep    1s
    AppiumLibrary.click element    ${objNovelsExpenseAndroid}
    sleep    1s
    ${Count}    get elements    xpath=.//*[@id='wrapper']//div[2]/span//div[@class='transaction expenses list-item']/a[@class='list-item-content']
    ${Count}    get length    ${Count}
    : FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Txn_amt}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//span/div//div[@class='transaction expenses list-item'][${Index}]//div[@class='amount']//span    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Txn_Bene}    run keyword if    ${Status}==True    Expenses_Tags    ${Index}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[2]/span//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    sleep    2s
    \    AppiumLibrary.click element    xpath=.//*[@id='wrapper']//div[2]/span//div[@class='transaction expenses list-item'][${Index}]/a[@class='list-item-content']
    \    AppiumLibrary.wait until page contains element    ${objPopupTxnHeader}    10s
    \    ${PopUp_Txn_Amt}    AppiumLibrary.get element attribute    ${objPopupTxnAmtAndroid}    textContent
    \    ${PopUp_Txn_Bene}    AppiumLibrary.get element attribute    ${objPopupTxnBeneficiary}    textContent
    \    should be equal as strings    ${Txn_amt}    ${PopUp_Txn_Amt}
    \    should contain    ${PopUp_Txn_Bene}    ${Txn_Bene}
    \    AppiumLibrary.click element    ${objPopupClose}
    \    AppiumLibrary.Wait Until Page Does Not contain Element    ${objPopupTxnHeader}    10s
    \    sleep    1s

Expenses_Tags
    [Arguments]    ${Index}
    ${iCount}    get elements    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    ${iCount}    get length    ${iCount}
    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    : FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[2]/div[@class='tag'][${Counter}]    textContent
    \    ${Beneficiary}    remove string    ${Beneficiary}    ${Txn_Tags}
    [Return]    ${Beneficiary}

Open_Transactions
    AppiumLibrary.click element    ${objHobbiesExpensesAndroid}
    AppiumLibrary.wait until page contains element    ${objNovelsExpenseAndroid}
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.click element    ${objResidenceExpensesAndroid}
    AppiumLibrary.wait until page contains element    ${objRentExpenseAndroid}
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.click element    ${objCarandTrafficExpensesAndroid}
    AppiumLibrary.wait until page contains element    ${objFuelsExpense}
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.click element    ${objBillsExpensesAndroid}
    AppiumLibrary.wait until page contains element    ${objElectricExpense}
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.click element    ${objGroceryExpensesAndroid}
    AppiumLibrary.wait until page contains element    ${objKiosksExpenseAndroid}
    AppiumLibrary.Capture Page Screenshot
    AppiumLibrary.click element    ${objGamesExpense}
    AppiumLibrary.click element    ${objRestrauExpense}
    AppiumLibrary.click element    ${objNovelsExpenseAndroid}
    AppiumLibrary.click element    ${objRentExpenseAndroid}
    AppiumLibrary.click element    ${objFuelsExpense}
    AppiumLibrary.click element    ${objElectricExpense}
    AppiumLibrary.click element    ${objPropertyTaxExpense}
    AppiumLibrary.click element    ${objGroceryExpense}
    AppiumLibrary.click element    ${objKiosksExpenseAndroid}
    AppiumLibrary.Capture Page Screenshot

Transactions_Beneficiary_List
    ${Beneficiary_List}    create list    List
    ${Count}    get elements    xpath=${objExpensesGamesTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Games Accesories')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Games Accesories')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesRestrauTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Cafes and Restaurants')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Cafes and Restaurants')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesNovelsTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Novels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Novels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesRentTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Rent')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Rent')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesFuelsTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Fuels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Fuels')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesElectricTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Electric')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Electric')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesPropertyTaxTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Property Tax')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Property Tax')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesGrcryTaxTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Grocery stores')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Grocery stores')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objExpensesKiosksTaxTxnBeneficiaryxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Kiosks')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    AppiumLibrary.Page Should Contain Element    xpath=.//*[@id='wrapper']//div[2]/span//div[${Index}]/a//div[@class='beneficiary']/div[@class='tag']
    \    ${Beneficiary}    run keyword if    ${Status}==True    Remove_Tags_For_Txns    ${Index}    ${Beneficiary}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'Kiosks')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Beneficiary_List}    ${Beneficiary}
    Log    ${Beneficiary_List}
    [Return]    ${Beneficiary_List}

Validate_Five_Most_Expenses
    [Arguments]    ${Beneficiary_List}
    Log    ${Beneficiary_List}
    ${Beneficiaries}    remove duplicates    ${Beneficiary_List}
    ${Count}    get elements    xpath=${objMostExpensesBenefxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Most_Exp_Benef}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='beneficiary']    textContent
    \    ${Bene_Count}    get count    ${Beneficiary_List}    ${Most_Exp_Benef}
    \    ${iCount}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='amount']/div    textContent
    \    ${Exp_Count}    split string    ${iCount}    (
    \    ${MostExp_Count}    set variable    ${Exp_Count[1]}
    \    ${MostExp_Count}    remove string    ${MostExp_Count}    )    x
    \    should be equal as strings    ${Bene_Count}    ${MostExp_Count}
    \    remove values from list    ${Beneficiaries}    ${Most_Exp_Benef}
    Log    ${Beneficiaries}
    ${Count1}    get length    ${Beneficiaries}
    :FOR    ${Index}    IN RANGE    1    ${Count1}
    \    ${Bene_Count}    get count    ${Beneficiary_List}    ${Beneficiaries[${Index}]}
    \    ${MostExp_Count}    convert to number    ${MostExp_Count}
    \    should be true    ${MostExp_Count}>=${Bene_Count}

Most_Expenses_Categories_Validation
    ${Count}    get elements    xpath=${objMostExpensesBenefxpath}
    ${Count}    get length    ${Count}
    :FOR    ${Index}    IN RANGE    1    ${Count}+1
    \    ${Most_Exp_Benef}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='beneficiary']    textContent
    \    ${Category}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//span[contains(.,'Most expenses')]/div[${Index}]//div[@class='subCategorys']    textContent
    \    Validate_Category_Presence    ${Category}    ${Most_Exp_Benef}

Remove_Tags_For_Txns
    [Arguments]    ${Index}    ${Beneficiary}
    ${iCount}    get elements    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    ${iCount}    get length    ${iCount}
    :FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='transaction expenses list-item'][${Index}]//div[2]/div[@class='tag'][${Counter}]    textContent
    \    ${Beneficiary}    remove string    ${Beneficiary}    ${Txn_Tags}
    [Return]    ${Beneficiary}

Validate_Category_Presence
    [Arguments]    ${Category}    ${Most_Exp_Benef}
    ${Category_List}    split string    ${Category}    ,
    ${Length}    get length    ${Category_List}
    :FOR    ${Index}    IN RANGE    ${Length}
    \    ${Ctgry}    set variable    ${Category_List[${Index}]}
    \    ${Benef_List}    Get_Specific_Ctgry_Beneficiary_List    ${Ctgry}
    \    list should contain value    ${Benef_List}    ${Most_Exp_Benef}

Get_Specific_Ctgry_Beneficiary_List
    [Arguments]    ${Ctgry}
    ${Count}    get elements    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item']//div[@class='beneficiary']
    ${Count}    get length    ${Count}
    ${Benef_List}    create list    Null
    :FOR    ${Index}    IN RANGE    1    ${count}+1
    \    ${Beneficiary}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    ${Status}    run keyword and return status    get elements    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    \    ${iCount}    run keyword if    ${Status}==True    get elements    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag']
    \    ${iCount}    run keyword if    ${Status}==True    get length    ${iCount}
    \    ${Beneficiary}    run keyword if    ${Status}==True    MostExp_Remove_Tags    ${Index}    ${Beneficiary}
    \    ...    ${iCount}    ${Ctgry}
    \    ...    ELSE    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']    textContent
    \    append to list    ${Benef_List}    ${Beneficiary}
    Log    ${Benef_List}
    [Return]    ${Benef_List}

MostExp_Remove_Tags
    [Arguments]    ${Index}    ${Beneficiary}    ${iCount}    ${Ctgry}
    ${Benef}    set variable    ${Beneficiary}
    :FOR    ${Counter}    IN RANGE    1    ${iCount}+1
    \    ${Txn_Tags}    AppiumLibrary.get element attribute    xpath=.//*[@id='wrapper']//div[@class='list-item-toggle' and contains(.,'${Ctgry}')]//..//following-sibling::div[@class='list-item-content']//div[@class='transaction expenses list-item'][${Index}]//div[@class='beneficiary']/div[@class='tag'][${Counter}]    textContent
    \    ${Benef}    remove string    ${Benef}    ${Txn_Tags}
    [Return]    ${Benef}
